{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","items","name","handleChangeName","bind","event","this","setState","target","value","id","map","item","isActive","fetch","then","res","json","result","data","error","className","Table","striped","bordered","hover","variant","index","key","onClick","changeName","Form","Group","controlId","Label","Control","placeholder","onBlur","saveName","onChange","short_code","founded","src","logo_path","alt","width","height","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6SAkIeA,G,kBAxGb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAO,GACPC,KAAM,IAGR,EAAKC,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBAPP,E,8EAUFC,GACfC,KAAKC,SAAS,CAACL,KAAMG,EAAMG,OAAOC,U,iCAGzBC,GACTJ,KAAKC,SAAS,CACZN,MAAOK,KAAKN,MAAMC,MAAMU,KAAI,SAAAC,GAE1B,OADIA,EAAKF,KAAOA,IAAIE,EAAKC,UAAW,GAC7BD,S,+BAKJF,GAAK,IAAD,OACXJ,KAAKC,SAAS,CACZN,MAAOK,KAAKN,MAAMC,MAAMU,KAAI,SAAAC,GAK1B,OAJIA,EAAKF,KAAOA,IACdE,EAAKV,KAAO,EAAKF,MAAME,KACvBU,EAAKC,UAAW,GAEXD,KAETV,KAAM,O,0CAIW,IAAD,OAClBY,MAAM,oIACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MACC,SAACG,GACC,EAAKX,SAAS,CACZN,MAAOiB,EAAOC,KAAKR,KAAI,SAAAC,GAErB,OADAA,EAAKC,UAAW,EACTD,UAMb,SAACQ,GACC,EAAKb,SAAS,CACZa,e,+BAMA,IAAD,OACP,OACE,yBAAKC,UAAU,OACb,kBAACC,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,EAACC,QAAQ,QACpC,+BACE,4BACE,iCACA,2HACA,4FACA,yGACA,4EAGJ,+BAEIpB,KAAKN,MAAMC,MAAMU,KAAI,SAACC,EAAMe,GAAP,OACnB,wBAAIC,IAAKhB,EAAKF,IACZ,4BAAKiB,EAAQ,GACb,wBAAIE,QAAS,EAAKC,WAAW1B,KAAK,EAAMQ,EAAKF,KACzCE,EAAKC,SACL,kBAACkB,EAAA,EAAKC,MAAN,CAAYC,UAAU,QACpB,kBAACF,EAAA,EAAKG,MAAN,oGACA,kBAACH,EAAA,EAAKI,QAAN,CACEC,YAAY,mDACZC,OAAQ,EAAKC,SAASlC,KAAK,EAAMQ,EAAKF,IACtCW,UAAU,aACVZ,MAAO,EAAKT,MAAME,KAClBqC,SAAU,EAAKpC,oBAGfS,EAAKV,MAGb,4BAAKU,EAAK4B,YACV,4BAAK5B,EAAK6B,SACV,4BAAI,yBAAKC,IAAK9B,EAAK+B,UAAWC,IAAKhC,EAAKV,KAAM2C,MAAM,KAAKC,OAAO,mB,GA9FhEC,IAAMC,YCbJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7C,MAAK,SAAA8C,GACjCA,EAAaC,kB","file":"static/js/main.70cedcda.chunk.js","sourcesContent":["import React from 'react';\nimport { Table, Form } from 'react-bootstrap';\nimport './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [],\n      name: '',\n    }\n\n    this.handleChangeName = this.handleChangeName.bind(this)\n  }\n\n  handleChangeName(event) {\n    this.setState({name: event.target.value});\n  }\n\n  changeName(id) {\n    this.setState({\n      items: this.state.items.map(item => {\n        if (item.id === id) item.isActive = true\n        return item\n      })\n    })\n  }\n\n  saveName(id) {\n    this.setState({\n      items: this.state.items.map(item => {\n        if (item.id === id) {\n          item.name = this.state.name\n          item.isActive = false\n        }\n        return item\n      }),\n      name: ''\n    })\n  }\n\n  componentDidMount() {\n    fetch(\"https://soccer.sportmonks.com/api/v2.0/teams/season/16222?api_token=c105cI8atxvUAMopLsiVqrcUHqZhZmh6RvSWXJBOsLiFtVXPWhJW34IVk8la\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            items: result.data.map(item => {\n              item.isActive = false\n              return item\n            })\n          });\n        },\n        // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n        // чтобы не перехватывать исключения из ошибок в самих компонентах.\n        (error) => {\n          this.setState({\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Table striped bordered hover variant=\"dark\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Название команды</th>\n              <th>Сокращение</th>\n              <th>Год основания</th>\n              <th>Логотип</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.state.items.map((item, index) =>\n                <tr key={item.id}>\n                  <td>{index + 1}</td>\n                  <td onClick={this.changeName.bind(this, item.id)}>\n                    { item.isActive ? (\n                      <Form.Group controlId=\"Name\">\n                        <Form.Label>Название команды</Form.Label>\n                        <Form.Control \n                          placeholder=\"Название\" \n                          onBlur={this.saveName.bind(this, item.id)} \n                          className=\"text-muted\"\n                          value={this.state.name} \n                          onChange={this.handleChangeName}\n                        />\n                      </Form.Group>\n                    ) : ( item.name\n                    )}\n                  </td>\n                  <td>{item.short_code}</td>\n                  <td>{item.founded}</td>\n                  <td><img src={item.logo_path} alt={item.name} width=\"75\" height=\"75\"/></td>\n                </tr>\n              )\n            }\n          </tbody>\n        </Table>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","items","name","sortDirection","handleChangeName","bind","event","this","setState","target","value","id","map","item","isActive","index","findIndex","slice","concat","e","key","saveName","field","sort","a","b","fetch","headers","then","res","json","result","teams","error","className","Table","striped","bordered","hover","variant","onClick","sortBy","changeName","Form","Group","controlId","Label","Control","autoFocus","placeholder","onBlur","onKeyDown","handleEnter","onChange","tla","venue","founded","src","crestUrl","alt","width","height","Button","deleteTeam","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.eba49af3.chunk.js","sourcesContent":["import React from 'react';\nimport { Table, Form, Button } from 'react-bootstrap';\nimport './App.css';\n\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      items: [],\n      name: '',\n      sortDirection: 'asc',\n    }\n\n    this.handleChangeName = this.handleChangeName.bind(this)\n  }\n\n  handleChangeName(event) {\n    this.setState({name: event.target.value});\n  }\n\n  changeName(id) {\n    this.setState({\n      items: this.state.items.map(item => {\n        if (item.id === id) item.isActive = true\n        return item\n      })\n    })\n\n  }\n\n  saveName(id) {\n    this.setState({\n      items: this.state.items.map(item => {\n        if (item.id === id) {\n          if (this.state.name !== '') item.name = this.state.name\n          item.isActive = false\n        }\n        return item\n      }),\n      name: ''\n    })\n  }\n\n  deleteTeam(id) {\n    let index = this.state.items.findIndex(item => item.id === id)\n    this.setState({\n      items: this.state.items.slice(0, index).concat(this.state.items.slice(index + 1))\n    })\n  }\n\n  handleEnter(id, e) {\n    if (e.key === 'Enter') {\n      this.saveName(id)\n    }\n  }\n\n  sortBy(field) {\n    let items = this.state.items.slice()\n    let sortDirection = this.state.sortDirection\n    items.sort((a, b) => {\n      if (a[field] < b[field]) {\n        return sortDirection === 'desc' ? 1 : -1\n      }\n      if (a[field] > b[field]) {\n        return sortDirection === 'desc' ? -1 : 1\n      }\n      return 0\n    })\n    this.setState({\n      items: items,\n      sortDirection: this.state.sortDirection === 'asc' ? 'desc' : 'asc'\n    })\n  }\n\n  componentDidMount() {\n    fetch('https://api.football-data.org/v2/competitions/2021/teams?season=2019', {\n      headers: {\n        'X-Auth-Token': '6324a72164424ef6ae805e7e77ba04a8'\n      }\n    })\n    .then(res => res.json())\n    .then(\n      (result) => {\n        this.setState({\n          items: result.teams.map(item => {\n            item.isActive = false\n            return item\n          })\n        });\n      },\n      // Примечание: важно обрабатывать ошибки именно здесь, а не в блоке catch(),\n      // чтобы не перехватывать исключения из ошибок в самих компонентах.\n      (error) => {\n        this.setState({\n          error\n        });\n      }\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Table striped bordered hover variant=\"dark\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th onClick={this.sortBy.bind(this, 'name')}>Название команды</th>\n              <th>Сокращение</th>\n              <th>Стадион</th>\n              <th onClick={this.sortBy.bind(this, 'founded')}>Год основания</th>\n              <th>Логотип</th>\n              <th>Действия</th>\n            </tr>\n          </thead>\n          <tbody>\n            {\n              this.state.items.map((item, index) =>\n                <tr key={item.id}>\n                  <td>{index + 1}</td>\n                  <td onClick={this.changeName.bind(this, item.id)}>\n                    { item.isActive ? (\n                      <Form.Group controlId=\"Name\">\n                        <Form.Label>Название команды</Form.Label>\n                        <Form.Control \n                          autoFocus\n                          placeholder=\"Название\"\n                          onBlur={this.saveName.bind(this, item.id)}\n                          onKeyDown={(e) => this.handleEnter(item.id, e)}\n                          className=\"text-muted\"\n                          value={this.state.name} \n                          onChange={this.handleChangeName}\n                        />\n                      </Form.Group>\n                    ) : ( item.name\n                    )}\n                  </td>\n                  <td>{item.tla}</td>\n                  <td>{item.venue}</td>\n                  <td>{item.founded}</td>\n                  <td><img src={item.crestUrl} alt={item.name} width=\"75\" height=\"75\"/></td>\n                  <td><Button variant=\"danger\" onClick={this.deleteTeam.bind(this, item.id)}>Удалить</Button></td>\n                </tr>\n              )\n            }\n          </tbody>\n        </Table>\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}